{"createdAt":"2025-04-03T03:03:16.586Z","updatedAt":"2025-04-13T22:47:06.000Z","id":"eJnIrFgWpnjhdErU","name":"Backup your credentials to GitHub","active":false,"nodes":[{"parameters":{},"id":"37ef3c01-5a52-4f4c-bf86-6292f550aef1","name":"On clicking 'execute'","type":"n8n-nodes-base.manualTrigger","position":[440,260],"typeVersion":1},{"parameters":{"content":"## Subworkflow","height":750.8363163824032,"width":2086.845881354743,"color":6},"id":"092efbe3-192a-4e41-b134-789412e61045","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[0,640],"typeVersion":1},{"parameters":{"assignments":{"assignments":[{"id":"8d513345-6484-431f-afb7-7cf045c90f4f","name":"Done","type":"boolean","value":true}]},"options":{}},"id":"f3135c28-111a-4d4d-a68d-515ff0b7cb18","name":"Return","type":"n8n-nodes-base.set","position":[1880,840],"typeVersion":3.3},{"parameters":{"url":"={{ $json.download_url }}","options":{}},"id":"4609db3c-cd8d-4a40-92b2-aa09791ed6dd","name":"Get File","type":"n8n-nodes-base.httpRequest","position":[980,720],"typeVersion":4.2},{"parameters":{"conditions":{"options":{"version":1,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"45ce825e-9fa6-430c-8931-9aaf22c42585","operator":{"type":"string","operation":"empty","singleValue":true},"leftValue":"={{ $json.content }}","rightValue":""},{"id":"9619a55f-7fb1-4f24-b1a7-7aeb82365806","operator":{"type":"string","operation":"notExists","singleValue":true},"leftValue":"={{ $json.error }}","rightValue":""}]},"options":{}},"id":"d7c533d9-6bf4-4b90-b812-dee52a2cabf3","name":"If file too large","type":"n8n-nodes-base.if","position":[780,740],"typeVersion":2},{"parameters":{},"id":"b03bbb13-e2d2-4cdc-8014-d6aad63c3691","name":"Merge Items","type":"n8n-nodes-base.merge","position":[780,1000],"typeVersion":2},{"parameters":{"jsCode":"const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"},"id":"9eb15b84-bac6-4a9b-97dd-e6e51819ebb4","name":"isDiffOrNew","type":"n8n-nodes-base.code","position":[980,1000],"typeVersion":1},{"parameters":{"dataType":"string","value1":"={{$json.github_status}}","rules":{"rules":[{"value2":"same"},{"value2":"different","output":1},{"value2":"new","output":2}]}},"id":"22787c3b-54e7-4d5b-bf8c-ac5adca37ccf","name":"Check Status","type":"n8n-nodes-base.switch","position":[1200,1000],"typeVersion":1},{"parameters":{},"id":"cb5d0069-bf73-4b8b-ba75-5729ca097b21","name":"Same file - Do nothing","type":"n8n-nodes-base.noOp","position":[1420,840],"typeVersion":1},{"parameters":{},"id":"9cc3289b-b9b3-445f-9dd8-c1cdea483db9","name":"File is different","type":"n8n-nodes-base.noOp","position":[1420,1000],"typeVersion":1},{"parameters":{},"id":"219c7b03-5fe3-4214-bbd5-61821e597a62","name":"File is new","type":"n8n-nodes-base.noOp","position":[1420,1160],"typeVersion":1},{"parameters":{"resource":"file","owner":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.name }}"},"filePath":"={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"},"id":"28930dc1-3e7d-4c59-8620-7c4011a33381","name":"Create new file","type":"n8n-nodes-base.github","position":[1640,1160],"typeVersion":1,"credentials":{"githubApi":{"id":"LbeWBgkNjJ1O4VjA","name":"GitHub account"}}},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.name }}"},"filePath":"={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"},"id":"394dc853-cff8-4fbb-bc65-7a8959d8e3fd","name":"Edit existing file","type":"n8n-nodes-base.github","position":[1640,980],"typeVersion":1,"credentials":{"githubApi":{"id":"LbeWBgkNjJ1O4VjA","name":"GitHub account"}}},{"parameters":{"options":{}},"id":"19a96271-9534-46d1-bbb3-178cb0664006","name":"Loop Over Items","type":"n8n-nodes-base.splitInBatches","position":[1040,360],"typeVersion":3},{"parameters":{"rule":{"interval":[{"triggerAtHour":1}]}},"id":"9f0edc33-0b32-49e9-a4b1-5577f13bae5d","name":"Schedule Trigger","type":"n8n-nodes-base.scheduleTrigger","position":[440,460],"typeVersion":1.2},{"parameters":{"content":"## Backup to GitHub \nThis workflow will backup all instance credentials to GitHub.\n\nThe files are saved `ID.json` for the filename.\n\n### Setup\nOpen `Globals` node and update the values below ðŸ‘‡\n\n- **repo.owner:** your Github username\n- **repo.name:** the name of your repository\n- **repo.path:** the folder to use within the repository. If it doesn't exist it will be created.\n\n\nIf your username was `john-doe` and your repository was called `n8n-backups` and you wanted the credentials to go into a `credentials` folder you would set:\n\n- repo.owner - john-doe\n- repo.name - n8n-backups\n- repo.path - credentials/\n\n\nThe workflow calls itself using a subworkflow, to help reduce memory usage.","height":596.4810912485963,"width":365.19481715599653,"color":4},"id":"11c3b302-cf42-442b-856a-eaf8d34e345d","name":"Sticky Note1","type":"n8n-nodes-base.stickyNote","position":[0,0],"typeVersion":1},{"parameters":{"content":"## Main workflow loop","height":434.88564057365943,"width":1028.7522287279464,"color":7},"id":"e6fbb501-77ce-461f-9e16-a95528462104","name":"Sticky Note2","type":"n8n-nodes-base.stickyNote","position":[400,180],"typeVersion":1},{"parameters":{"resource":"file","operation":"get","owner":{"__rl":true,"mode":"name","value":"={{ $json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $json.repo.name }}"},"filePath":"={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json","asBinaryProperty":false,"additionalParameters":{}},"id":"931d8614-e565-4277-a3f9-208d20af8771","name":"Get file data","type":"n8n-nodes-base.github","position":[580,740],"typeVersion":1,"alwaysOutputData":true,"credentials":{"githubApi":{"id":"LbeWBgkNjJ1O4VjA","name":"GitHub account"}},"continueOnFail":true},{"parameters":{"assignments":{"assignments":[{"id":"6cf546c5-5737-4dbd-851b-17d68e0a3780","name":"repo.owner","type":"string","value":"hoangthikd"},{"id":"452efa28-2dc6-4ea3-a7a2-c35d100d0382","name":"repo.name","type":"string","value":"n8nbk"},{"id":"81c4dc54-86bf-4432-a23f-22c7ea831e74","name":"repo.path","type":"string","value":"credentials/"}]},"options":{}},"id":"37bf8739-d574-436f-baae-9cc34c71eb29","name":"Globals","type":"n8n-nodes-base.set","position":[380,900],"typeVersion":3.4},{"parameters":{"command":"npx n8n export:credentials --all --decrypted"},"id":"1eb94e44-8748-4747-9f48-710c2e3f7745","name":"Execute Command","type":"n8n-nodes-base.executeCommand","position":[660,360],"typeVersion":1,"retryOnFail":true,"maxTries":5,"waitBetweenTries":2000},{"parameters":{"jsCode":"// Function to beautify JSON\nfunction beautifyJson(jsonString) {\n  try {\n    // Parse the JSON string\n    const jsonObject = JSON.parse(jsonString);\n\n    // Format the JSON with indentation\n    return jsonObject; // Return the parsed object directly\n  } catch (error) {\n    // Return the error message if JSON is invalid\n    return `Invalid JSON: ${error.message}`;\n  }\n}\n\n// Retrieve the JSON object from the input data\nconst input = $input.all()[0].json;\n\n// Extract the JSON string from the stdout field\nconst jsonString = input.stdout.match(/\\[{.*}\\]/s);\n\n// Check if a valid JSON string is found\nif (!jsonString) {\n  return {\n    json: {\n      error: \"No valid JSON string found in stdout.\"\n    }\n  };\n}\n\n// Beautify the JSON\nconst beautifiedJson = beautifyJson(jsonString[0]);\n\n// Output the beautified JSON, ensuring each entry is in an object with a 'json' key\nconst output = beautifiedJson.map(entry => ({ json: entry }));\n\n// Return the output\nreturn output;\n"},"id":"30429cb9-a6ce-43e7-9e34-3f3aef380e1b","name":"JSON formatting","type":"n8n-nodes-base.code","position":[840,360],"typeVersion":2},{"parameters":{"content":"## Edit this node ðŸ‘‡","height":80,"width":150,"color":4},"id":"2f900236-49a6-485a-9817-0e1f1ba1d73d","name":"Sticky Note3","type":"n8n-nodes-base.stickyNote","position":[340,800],"typeVersion":1},{"parameters":{"workflowId":"={{ $workflow.id }}","mode":"each","options":{}},"id":"93a51003-141d-43a0-9718-52bcdc48ea98","name":"Execute Workflow","type":"n8n-nodes-base.executeWorkflow","position":[1260,360],"typeVersion":1},{"parameters":{"inputSource":"passthrough"},"id":"098fe0ec-a1b9-4216-93db-ecf330521a65","name":"Execute Workflow Trigger","type":"n8n-nodes-base.executeWorkflowTrigger","position":[100,1020],"typeVersion":1.1}],"connections":{"Globals":{"main":[[{"node":"Get file data","type":"main","index":0}]]},"Get File":{"main":[[{"node":"Merge Items","type":"main","index":0}]]},"File is new":{"main":[[{"node":"Create new file","type":"main","index":0}]]},"Merge Items":{"main":[[{"node":"isDiffOrNew","type":"main","index":0}]]},"isDiffOrNew":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"Check Status":{"main":[[{"node":"Same file - Do nothing","type":"main","index":0}],[{"node":"File is different","type":"main","index":0}],[{"node":"File is new","type":"main","index":0}]]},"Get file data":{"main":[[{"node":"If file too large","type":"main","index":0}]]},"Create new file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Execute Command":{"main":[[{"node":"JSON formatting","type":"main","index":0}]]},"JSON formatting":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"Execute Workflow","type":"main","index":0}]]},"Execute Workflow":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Schedule Trigger":{"main":[[{"node":"Execute Command","type":"main","index":0}]]},"File is different":{"main":[[{"node":"Edit existing file","type":"main","index":0}]]},"If file too large":{"main":[[{"node":"Get File","type":"main","index":0}],[{"node":"Merge Items","type":"main","index":0}]]},"Edit existing file":{"main":[[{"node":"Return","type":"main","index":0}]]},"On clicking 'execute'":{"main":[[{"node":"Execute Command","type":"main","index":0}]]},"Same file - Do nothing":{"main":[[{"node":"Return","type":"main","index":0}]]},"Execute Workflow Trigger":{"main":[[{"node":"Globals","type":"main","index":0},{"node":"Merge Items","type":"main","index":1}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"a732cef2-0e8c-4071-bddb-54a48f36d43c","triggerCount":0,"tags":[]}